spring.application.name=ShoesProject

spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/webdb
spring.datasource.username=webuser
spring.datasource.password=webuser

#log4j2 레벨 설정 간단히
logging.level.springframework=info
logging.level.com.busanit501=debug

#spring jpa 관련 설정.
spring.jpa.hibernate.ddl-auto=create
# 콘솔 상에 sql 구문을 표기 여부. 이쁘게 표기
spring.jpa.properties.hibernate.format_sql=true
# 콘솔 상에 sql 구문을 표기
spring.jpa.show-sql=true

#파일 업로드 관련 설정.
# 관리자가 관리하는 상품, 여행지, 카페메뉴, 동물사진, static 하위에 이미지 폴더
spring.servlet.multipart.enabled=true
# 프로젝트시, 사용자가 업로드한 경로
spring.servlet.multipart.location=c:\\upload\\reviewTest
spring.servlet.multipart.max-request-size=100MB
spring.servlet.multipart.max-file-size=100MB

#서버에서 , 해당 경로명을 설정 해두면, 패키지명으로, 각 파일에서 사용가능함.
com.busanit501.upload.path=c:\\upload\\reviewTest

# devtools 끄기
spring.devtools.restart.enabled=true

#로그레벨 조정, 구체적으로 확인 위해서.
logging.level.org.springframework.security = trace

#캐시 기능 삭제
#spring.cache.type=none

##카카오 로그인 API 관련 설정
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.user-name-attribute=id
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me

spring.security.oauth2.client.registration.kakao.client-name=kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.redirect_uri=http://localhost:8080/login/oauth2/code/kakao
# REST API 키 값 복붙
spring.security.oauth2.client.registration.kakao.client-id=7eb0b23b992bd68455883573e251643b

# secret 값 복붙
spring.security.oauth2.client.registration.kakao.client-secret=SROaOdbLtQjDaCzHdERb1zwqcbND50Dy
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.scope=profile_nickname





#spring.jpa.hibernate.ddl-auto=update, 설명
# 언제 사용하느냐? 개발환경일 때, update 또는 필요시 마다
# 운영 환경 : none, validate
# 결론, 서버가 시작시 테이블을 새롭게 생성 또는 삭제 해주는 기능.
# 기존에는 sql , create ,alter, drop ,

# none : DDL 을 하지 않는다.
# create-drop : 실행할 때 DDL 실행하고, 종료시, 테이블을 모두 삭제
# create : 실행시 마다 새롭게 테이블을 만든다.
# update : 변경시 변경된 부분이 있을 때 새로생성
# validate : 변경된 부분만 알려주고 종료.
# git commit 확인
